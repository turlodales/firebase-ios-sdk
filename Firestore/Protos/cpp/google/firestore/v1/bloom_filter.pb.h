/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/bloom_filter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto;
namespace google {
namespace firestore {
namespace v1 {
class BitSequence;
class BitSequenceDefaultTypeInternal;
extern BitSequenceDefaultTypeInternal _BitSequence_default_instance_;
class BloomFilter;
class BloomFilterDefaultTypeInternal;
extern BloomFilterDefaultTypeInternal _BloomFilter_default_instance_;
}  // namespace v1
}  // namespace firestore
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::firestore::v1::BitSequence* Arena::CreateMaybeMessage<::google::firestore::v1::BitSequence>(Arena*);
template<> ::google::firestore::v1::BloomFilter* Arena::CreateMaybeMessage<::google::firestore::v1::BloomFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace firestore {
namespace v1 {

// ===================================================================

class BitSequence :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.BitSequence) */ {
 public:
  BitSequence();
  virtual ~BitSequence();

  BitSequence(const BitSequence& from);
  BitSequence(BitSequence&& from) noexcept
    : BitSequence() {
    *this = ::std::move(from);
  }

  inline BitSequence& operator=(const BitSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitSequence& operator=(BitSequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BitSequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitSequence* internal_default_instance() {
    return reinterpret_cast<const BitSequence*>(
               &_BitSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BitSequence& a, BitSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(BitSequence* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitSequence* New() const final {
    return CreateMaybeMessage<BitSequence>(nullptr);
  }

  BitSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitSequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BitSequence& from);
  void MergeFrom(const BitSequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitSequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.firestore.v1.BitSequence";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto);
    return ::descriptor_table_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitmapFieldNumber = 1,
    kPaddingFieldNumber = 2,
  };
  // bytes bitmap = 1;
  void clear_bitmap();
  const std::string& bitmap() const;
  void set_bitmap(const std::string& value);
  void set_bitmap(std::string&& value);
  void set_bitmap(const char* value);
  void set_bitmap(const void* value, size_t size);
  std::string* mutable_bitmap();
  std::string* release_bitmap();
  void set_allocated_bitmap(std::string* bitmap);
  private:
  const std::string& _internal_bitmap() const;
  void _internal_set_bitmap(const std::string& value);
  std::string* _internal_mutable_bitmap();
  public:

  // int32 padding = 2;
  void clear_padding();
  ::PROTOBUF_NAMESPACE_ID::int32 padding() const;
  void set_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_padding() const;
  void _internal_set_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.firestore.v1.BitSequence)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitmap_;
  ::PROTOBUF_NAMESPACE_ID::int32 padding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto;
};
// -------------------------------------------------------------------

class BloomFilter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.BloomFilter) */ {
 public:
  BloomFilter();
  virtual ~BloomFilter();

  BloomFilter(const BloomFilter& from);
  BloomFilter(BloomFilter&& from) noexcept
    : BloomFilter() {
    *this = ::std::move(from);
  }

  inline BloomFilter& operator=(const BloomFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloomFilter& operator=(BloomFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BloomFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BloomFilter* internal_default_instance() {
    return reinterpret_cast<const BloomFilter*>(
               &_BloomFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BloomFilter& a, BloomFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(BloomFilter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BloomFilter* New() const final {
    return CreateMaybeMessage<BloomFilter>(nullptr);
  }

  BloomFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BloomFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BloomFilter& from);
  void MergeFrom(const BloomFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloomFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.firestore.v1.BloomFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto);
    return ::descriptor_table_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitsFieldNumber = 1,
    kHashCountFieldNumber = 2,
  };
  // .google.firestore.v1.BitSequence bits = 1;
  bool has_bits() const;
  private:
  bool _internal_has_bits() const;
  public:
  void clear_bits();
  const ::google::firestore::v1::BitSequence& bits() const;
  ::google::firestore::v1::BitSequence* release_bits();
  ::google::firestore::v1::BitSequence* mutable_bits();
  void set_allocated_bits(::google::firestore::v1::BitSequence* bits);
  private:
  const ::google::firestore::v1::BitSequence& _internal_bits() const;
  ::google::firestore::v1::BitSequence* _internal_mutable_bits();
  public:

  // int32 hash_count = 2;
  void clear_hash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 hash_count() const;
  void set_hash_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hash_count() const;
  void _internal_set_hash_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.firestore.v1.BloomFilter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::firestore::v1::BitSequence* bits_;
  ::PROTOBUF_NAMESPACE_ID::int32 hash_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BitSequence

// bytes bitmap = 1;
inline void BitSequence::clear_bitmap() {
  bitmap_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BitSequence::bitmap() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.BitSequence.bitmap)
  return _internal_bitmap();
}
inline void BitSequence::set_bitmap(const std::string& value) {
  _internal_set_bitmap(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.BitSequence.bitmap)
}
inline std::string* BitSequence::mutable_bitmap() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.BitSequence.bitmap)
  return _internal_mutable_bitmap();
}
inline const std::string& BitSequence::_internal_bitmap() const {
  return bitmap_.GetNoArena();
}
inline void BitSequence::_internal_set_bitmap(const std::string& value) {
  
  bitmap_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BitSequence::set_bitmap(std::string&& value) {
  
  bitmap_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1.BitSequence.bitmap)
}
inline void BitSequence::set_bitmap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bitmap_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.BitSequence.bitmap)
}
inline void BitSequence::set_bitmap(const void* value, size_t size) {
  
  bitmap_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.BitSequence.bitmap)
}
inline std::string* BitSequence::_internal_mutable_bitmap() {
  
  return bitmap_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BitSequence::release_bitmap() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.BitSequence.bitmap)
  
  return bitmap_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BitSequence::set_allocated_bitmap(std::string* bitmap) {
  if (bitmap != nullptr) {
    
  } else {
    
  }
  bitmap_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bitmap);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BitSequence.bitmap)
}

// int32 padding = 2;
inline void BitSequence::clear_padding() {
  padding_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitSequence::_internal_padding() const {
  return padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitSequence::padding() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.BitSequence.padding)
  return _internal_padding();
}
inline void BitSequence::_internal_set_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  padding_ = value;
}
inline void BitSequence::set_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.BitSequence.padding)
}

// -------------------------------------------------------------------

// BloomFilter

// .google.firestore.v1.BitSequence bits = 1;
inline bool BloomFilter::_internal_has_bits() const {
  return this != internal_default_instance() && bits_ != nullptr;
}
inline bool BloomFilter::has_bits() const {
  return _internal_has_bits();
}
inline void BloomFilter::clear_bits() {
  if (GetArenaNoVirtual() == nullptr && bits_ != nullptr) {
    delete bits_;
  }
  bits_ = nullptr;
}
inline const ::google::firestore::v1::BitSequence& BloomFilter::_internal_bits() const {
  const ::google::firestore::v1::BitSequence* p = bits_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::firestore::v1::BitSequence*>(
      &::google::firestore::v1::_BitSequence_default_instance_);
}
inline const ::google::firestore::v1::BitSequence& BloomFilter::bits() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.BloomFilter.bits)
  return _internal_bits();
}
inline ::google::firestore::v1::BitSequence* BloomFilter::release_bits() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.BloomFilter.bits)
  
  ::google::firestore::v1::BitSequence* temp = bits_;
  bits_ = nullptr;
  return temp;
}
inline ::google::firestore::v1::BitSequence* BloomFilter::_internal_mutable_bits() {
  
  if (bits_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::firestore::v1::BitSequence>(GetArenaNoVirtual());
    bits_ = p;
  }
  return bits_;
}
inline ::google::firestore::v1::BitSequence* BloomFilter::mutable_bits() {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.BloomFilter.bits)
  return _internal_mutable_bits();
}
inline void BloomFilter::set_allocated_bits(::google::firestore::v1::BitSequence* bits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bits_;
  }
  if (bits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bits, submessage_arena);
    }
    
  } else {
    
  }
  bits_ = bits;
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BloomFilter.bits)
}

// int32 hash_count = 2;
inline void BloomFilter::clear_hash_count() {
  hash_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BloomFilter::_internal_hash_count() const {
  return hash_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BloomFilter::hash_count() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.BloomFilter.hash_count)
  return _internal_hash_count();
}
inline void BloomFilter::_internal_set_hash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hash_count_ = value;
}
inline void BloomFilter::set_hash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hash_count(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.BloomFilter.hash_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace firestore
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto
