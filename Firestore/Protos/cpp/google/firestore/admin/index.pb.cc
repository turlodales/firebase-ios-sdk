/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/admin/index.proto

#include "google/firestore/admin/index.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fadmin_2findex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Index_IndexField_google_2ffirestore_2fadmin_2findex_2eproto;
namespace google {
namespace firestore {
namespace admin {
namespace v1 {
class Index_IndexFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Index_IndexField> _instance;
  int order_;
  int array_config_;
} _Index_IndexField_default_instance_;
class IndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Index> _instance;
} _Index_default_instance_;
}  // namespace v1
}  // namespace admin
}  // namespace firestore
}  // namespace google
static void InitDefaultsscc_info_Index_google_2ffirestore_2fadmin_2findex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::admin::v1::_Index_default_instance_;
    new (ptr) ::google::firestore::admin::v1::Index();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::admin::v1::Index::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Index_google_2ffirestore_2fadmin_2findex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Index_google_2ffirestore_2fadmin_2findex_2eproto}, {
      &scc_info_Index_IndexField_google_2ffirestore_2fadmin_2findex_2eproto.base,}};

static void InitDefaultsscc_info_Index_IndexField_google_2ffirestore_2fadmin_2findex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::firestore::admin::v1::_Index_IndexField_default_instance_;
    new (ptr) ::google::firestore::admin::v1::Index_IndexField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::firestore::admin::v1::Index_IndexField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Index_IndexField_google_2ffirestore_2fadmin_2findex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Index_IndexField_google_2ffirestore_2fadmin_2findex_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2ffirestore_2fadmin_2findex_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2ffirestore_2fadmin_2findex_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2ffirestore_2fadmin_2findex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2ffirestore_2fadmin_2findex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::admin::v1::Index_IndexField, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::admin::v1::Index_IndexField, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::admin::v1::Index_IndexField, field_path_),
  offsetof(::google::firestore::admin::v1::Index_IndexFieldDefaultTypeInternal, order_),
  offsetof(::google::firestore::admin::v1::Index_IndexFieldDefaultTypeInternal, array_config_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::admin::v1::Index_IndexField, value_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::admin::v1::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::firestore::admin::v1::Index, name_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::admin::v1::Index, query_scope_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::admin::v1::Index, fields_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::admin::v1::Index, state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::firestore::admin::v1::Index_IndexField)},
  { 9, -1, sizeof(::google::firestore::admin::v1::Index)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::admin::v1::_Index_IndexField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::admin::v1::_Index_default_instance_),
};

const char descriptor_table_protodef_google_2ffirestore_2fadmin_2findex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"google/firestore/admin/index.proto\022\031go"
  "ogle.firestore.admin.v1\032\031google/api/reso"
  "urce.proto\"\243\006\n\005Index\022\014\n\004name\030\001 \001(\t\022@\n\013qu"
  "ery_scope\030\002 \001(\0162+.google.firestore.admin"
  ".v1.Index.QueryScope\022;\n\006fields\030\003 \003(\0132+.g"
  "oogle.firestore.admin.v1.Index.IndexFiel"
  "d\0225\n\005state\030\004 \001(\0162&.google.firestore.admi"
  "n.v1.Index.State\032\275\002\n\nIndexField\022\022\n\nfield"
  "_path\030\001 \001(\t\022B\n\005order\030\002 \001(\01621.google.fire"
  "store.admin.v1.Index.IndexField.OrderH\000\022"
  "O\n\014array_config\030\003 \001(\01627.google.firestore"
  ".admin.v1.Index.IndexField.ArrayConfigH\000"
  "\"=\n\005Order\022\025\n\021ORDER_UNSPECIFIED\020\000\022\r\n\tASCE"
  "NDING\020\001\022\016\n\nDESCENDING\020\002\"9\n\013ArrayConfig\022\034"
  "\n\030ARRAY_CONFIG_UNSPECIFIED\020\000\022\014\n\010CONTAINS"
  "\020\001B\014\n\nvalue_mode\"O\n\nQueryScope\022\033\n\027QUERY_"
  "SCOPE_UNSPECIFIED\020\000\022\016\n\nCOLLECTION\020\001\022\024\n\020C"
  "OLLECTION_GROUP\020\002\"I\n\005State\022\025\n\021STATE_UNSP"
  "ECIFIED\020\000\022\014\n\010CREATING\020\001\022\t\n\005READY\020\002\022\020\n\014NE"
  "EDS_REPAIR\020\003:z\352Aw\n\036firestore.googleapis."
  "com/Index\022Uprojects/{project}/databases/"
  "{database}/collectionGroups/{collection}"
  "/indexes/{index}B\336\001\n\035com.google.firestor"
  "e.admin.v1B\nIndexProtoP\001Z>google.golang."
  "org/genproto/googleapis/firestore/admin/"
  "v1;admin\242\002\004GCFS\252\002\037Google.Cloud.Firestore"
  ".Admin.V1\312\002\037Google\\Cloud\\Firestore\\Admin"
  "\\V1\352\002#Google::Cloud::Firestore::Admin::V"
  "1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fresource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto_sccs[2] = {
  &scc_info_Index_google_2ffirestore_2fadmin_2findex_2eproto.base,
  &scc_info_Index_IndexField_google_2ffirestore_2fadmin_2findex_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto_once;
static bool descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto = {
  &descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto_initialized, descriptor_table_protodef_google_2ffirestore_2fadmin_2findex_2eproto, "google/firestore/admin/index.proto", 1129,
  &descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto_once, descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto_sccs, descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_google_2ffirestore_2fadmin_2findex_2eproto::offsets,
  file_level_metadata_google_2ffirestore_2fadmin_2findex_2eproto, 2, file_level_enum_descriptors_google_2ffirestore_2fadmin_2findex_2eproto, file_level_service_descriptors_google_2ffirestore_2fadmin_2findex_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2ffirestore_2fadmin_2findex_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto), true);
namespace google {
namespace firestore {
namespace admin {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Index_IndexField_Order_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto);
  return file_level_enum_descriptors_google_2ffirestore_2fadmin_2findex_2eproto[0];
}
bool Index_IndexField_Order_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Index_IndexField_Order Index_IndexField::ORDER_UNSPECIFIED;
constexpr Index_IndexField_Order Index_IndexField::ASCENDING;
constexpr Index_IndexField_Order Index_IndexField::DESCENDING;
constexpr Index_IndexField_Order Index_IndexField::Order_MIN;
constexpr Index_IndexField_Order Index_IndexField::Order_MAX;
constexpr int Index_IndexField::Order_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Index_IndexField_ArrayConfig_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto);
  return file_level_enum_descriptors_google_2ffirestore_2fadmin_2findex_2eproto[1];
}
bool Index_IndexField_ArrayConfig_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Index_IndexField_ArrayConfig Index_IndexField::ARRAY_CONFIG_UNSPECIFIED;
constexpr Index_IndexField_ArrayConfig Index_IndexField::CONTAINS;
constexpr Index_IndexField_ArrayConfig Index_IndexField::ArrayConfig_MIN;
constexpr Index_IndexField_ArrayConfig Index_IndexField::ArrayConfig_MAX;
constexpr int Index_IndexField::ArrayConfig_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Index_QueryScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto);
  return file_level_enum_descriptors_google_2ffirestore_2fadmin_2findex_2eproto[2];
}
bool Index_QueryScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Index_QueryScope Index::QUERY_SCOPE_UNSPECIFIED;
constexpr Index_QueryScope Index::COLLECTION;
constexpr Index_QueryScope Index::COLLECTION_GROUP;
constexpr Index_QueryScope Index::QueryScope_MIN;
constexpr Index_QueryScope Index::QueryScope_MAX;
constexpr int Index::QueryScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Index_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto);
  return file_level_enum_descriptors_google_2ffirestore_2fadmin_2findex_2eproto[3];
}
bool Index_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Index_State Index::STATE_UNSPECIFIED;
constexpr Index_State Index::CREATING;
constexpr Index_State Index::READY;
constexpr Index_State Index::NEEDS_REPAIR;
constexpr Index_State Index::State_MIN;
constexpr Index_State Index::State_MAX;
constexpr int Index::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Index_IndexField::InitAsDefaultInstance() {
  ::google::firestore::admin::v1::_Index_IndexField_default_instance_.order_ = 0;
  ::google::firestore::admin::v1::_Index_IndexField_default_instance_.array_config_ = 0;
}
class Index_IndexField::_Internal {
 public:
};

Index_IndexField::Index_IndexField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.admin.v1.Index.IndexField)
}
Index_IndexField::Index_IndexField(const Index_IndexField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_path().empty()) {
    field_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_path_);
  }
  clear_has_value_mode();
  switch (from.value_mode_case()) {
    case kOrder: {
      _internal_set_order(from._internal_order());
      break;
    }
    case kArrayConfig: {
      _internal_set_array_config(from._internal_array_config());
      break;
    }
    case VALUE_MODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.admin.v1.Index.IndexField)
}

void Index_IndexField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Index_IndexField_google_2ffirestore_2fadmin_2findex_2eproto.base);
  field_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_value_mode();
}

Index_IndexField::~Index_IndexField() {
  // @@protoc_insertion_point(destructor:google.firestore.admin.v1.Index.IndexField)
  SharedDtor();
}

void Index_IndexField::SharedDtor() {
  field_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value_mode()) {
    clear_value_mode();
  }
}

void Index_IndexField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Index_IndexField& Index_IndexField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Index_IndexField_google_2ffirestore_2fadmin_2findex_2eproto.base);
  return *internal_default_instance();
}


void Index_IndexField::clear_value_mode() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.admin.v1.Index.IndexField)
  switch (value_mode_case()) {
    case kOrder: {
      // No need to clear
      break;
    }
    case kArrayConfig: {
      // No need to clear
      break;
    }
    case VALUE_MODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_MODE_NOT_SET;
}


void Index_IndexField::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.admin.v1.Index.IndexField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_value_mode();
  _internal_metadata_.Clear();
}

const char* Index_IndexField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string field_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.admin.v1.Index.IndexField.field_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.firestore.admin.v1.Index.IndexField.Order order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_order(static_cast<::google::firestore::admin::v1::Index_IndexField_Order>(val));
        } else goto handle_unusual;
        continue;
      // .google.firestore.admin.v1.Index.IndexField.ArrayConfig array_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_array_config(static_cast<::google::firestore::admin::v1::Index_IndexField_ArrayConfig>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Index_IndexField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.admin.v1.Index.IndexField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_path = 1;
  if (this->field_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_path().data(), static_cast<int>(this->_internal_field_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.admin.v1.Index.IndexField.field_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field_path(), target);
  }

  // .google.firestore.admin.v1.Index.IndexField.Order order = 2;
  if (_internal_has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_order(), target);
  }

  // .google.firestore.admin.v1.Index.IndexField.ArrayConfig array_config = 3;
  if (_internal_has_array_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_array_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.admin.v1.Index.IndexField)
  return target;
}

size_t Index_IndexField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.admin.v1.Index.IndexField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field_path = 1;
  if (this->field_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_path());
  }

  switch (value_mode_case()) {
    // .google.firestore.admin.v1.Index.IndexField.Order order = 2;
    case kOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_order());
      break;
    }
    // .google.firestore.admin.v1.Index.IndexField.ArrayConfig array_config = 3;
    case kArrayConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_array_config());
      break;
    }
    case VALUE_MODE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Index_IndexField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.admin.v1.Index.IndexField)
  GOOGLE_DCHECK_NE(&from, this);
  const Index_IndexField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Index_IndexField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.admin.v1.Index.IndexField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.admin.v1.Index.IndexField)
    MergeFrom(*source);
  }
}

void Index_IndexField::MergeFrom(const Index_IndexField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.admin.v1.Index.IndexField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_path().size() > 0) {

    field_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_path_);
  }
  switch (from.value_mode_case()) {
    case kOrder: {
      _internal_set_order(from._internal_order());
      break;
    }
    case kArrayConfig: {
      _internal_set_array_config(from._internal_array_config());
      break;
    }
    case VALUE_MODE_NOT_SET: {
      break;
    }
  }
}

void Index_IndexField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.admin.v1.Index.IndexField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index_IndexField::CopyFrom(const Index_IndexField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.admin.v1.Index.IndexField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index_IndexField::IsInitialized() const {
  return true;
}

void Index_IndexField::InternalSwap(Index_IndexField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_path_.Swap(&other->field_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_mode_, other->value_mode_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Index_IndexField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Index::InitAsDefaultInstance() {
}
class Index::_Internal {
 public:
};

Index::Index()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.firestore.admin.v1.Index)
}
Index::Index(const Index& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&query_scope_, &from.query_scope_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&query_scope_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:google.firestore.admin.v1.Index)
}

void Index::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Index_google_2ffirestore_2fadmin_2findex_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&query_scope_)) + sizeof(state_));
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:google.firestore.admin.v1.Index)
  SharedDtor();
}

void Index::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Index& Index::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Index_google_2ffirestore_2fadmin_2findex_2eproto.base);
  return *internal_default_instance();
}


void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.admin.v1.Index)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&query_scope_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* Index::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.admin.v1.Index.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.firestore.admin.v1.Index.QueryScope query_scope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_query_scope(static_cast<::google::firestore::admin::v1::Index_QueryScope>(val));
        } else goto handle_unusual;
        continue;
      // repeated .google.firestore.admin.v1.Index.IndexField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.firestore.admin.v1.Index.State state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::google::firestore::admin::v1::Index_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Index::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.admin.v1.Index)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.admin.v1.Index.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.firestore.admin.v1.Index.QueryScope query_scope = 2;
  if (this->query_scope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_query_scope(), target);
  }

  // repeated .google.firestore.admin.v1.Index.IndexField fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  // .google.firestore.admin.v1.Index.State state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.admin.v1.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.admin.v1.Index)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.admin.v1.Index.IndexField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.firestore.admin.v1.Index.QueryScope query_scope = 2;
  if (this->query_scope() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_query_scope());
  }

  // .google.firestore.admin.v1.Index.State state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Index::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.firestore.admin.v1.Index)
  GOOGLE_DCHECK_NE(&from, this);
  const Index* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Index>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.firestore.admin.v1.Index)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.firestore.admin.v1.Index)
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.admin.v1.Index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.query_scope() != 0) {
    _internal_set_query_scope(from._internal_query_scope());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void Index::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.firestore.admin.v1.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.admin.v1.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::InternalSwap(Index* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_scope_, other->query_scope_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Index::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace admin
}  // namespace firestore
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::firestore::admin::v1::Index_IndexField* Arena::CreateMaybeMessage< ::google::firestore::admin::v1::Index_IndexField >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::admin::v1::Index_IndexField >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::admin::v1::Index* Arena::CreateMaybeMessage< ::google::firestore::admin::v1::Index >(Arena* arena) {
  return Arena::CreateInternal< ::google::firestore::admin::v1::Index >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
